// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0

package database

import (
	"context"
	"database/sql"
	"fmt"
)

type DBTX interface {
	ExecContext(context.Context, string, ...interface{}) (sql.Result, error)
	PrepareContext(context.Context, string) (*sql.Stmt, error)
	QueryContext(context.Context, string, ...interface{}) (*sql.Rows, error)
	QueryRowContext(context.Context, string, ...interface{}) *sql.Row
}

func New(db DBTX) *Queries {
	return &Queries{db: db}
}

func Prepare(ctx context.Context, db DBTX) (*Queries, error) {
	q := Queries{db: db}
	var err error
	if q.addObjectTypeValueStmt, err = db.PrepareContext(ctx, addObjectTypeValue); err != nil {
		return nil, fmt.Errorf("error preparing query AddObjectTypeValue: %w", err)
	}
	if q.addObjectsToFactStmt, err = db.PrepareContext(ctx, addObjectsToFact); err != nil {
		return nil, fmt.Errorf("error preparing query AddObjectsToFact: %w", err)
	}
	if q.addObjectsToTaskStmt, err = db.PrepareContext(ctx, addObjectsToTask); err != nil {
		return nil, fmt.Errorf("error preparing query AddObjectsToTask: %w", err)
	}
	if q.addTagAndStepToFilteredObjectsStmt, err = db.PrepareContext(ctx, addTagAndStepToFilteredObjects); err != nil {
		return nil, fmt.Errorf("error preparing query AddTagAndStepToFilteredObjects: %w", err)
	}
	if q.addTagToObjectStmt, err = db.PrepareContext(ctx, addTagToObject); err != nil {
		return nil, fmt.Errorf("error preparing query AddTagToObject: %w", err)
	}
	if q.completeImportTaskStmt, err = db.PrepareContext(ctx, completeImportTask); err != nil {
		return nil, fmt.Errorf("error preparing query CompleteImportTask: %w", err)
	}
	if q.countActionExecutionsStmt, err = db.PrepareContext(ctx, countActionExecutions); err != nil {
		return nil, fmt.Errorf("error preparing query CountActionExecutions: %w", err)
	}
	if q.countAutomatedActionsStmt, err = db.PrepareContext(ctx, countAutomatedActions); err != nil {
		return nil, fmt.Errorf("error preparing query CountAutomatedActions: %w", err)
	}
	if q.countFactsByOrgIDStmt, err = db.PrepareContext(ctx, countFactsByOrgID); err != nil {
		return nil, fmt.Errorf("error preparing query CountFactsByOrgID: %w", err)
	}
	if q.countFunnelsStmt, err = db.PrepareContext(ctx, countFunnels); err != nil {
		return nil, fmt.Errorf("error preparing query CountFunnels: %w", err)
	}
	if q.countImportTasksStmt, err = db.PrepareContext(ctx, countImportTasks); err != nil {
		return nil, fmt.Errorf("error preparing query CountImportTasks: %w", err)
	}
	if q.countListsByOrgIDStmt, err = db.PrepareContext(ctx, countListsByOrgID); err != nil {
		return nil, fmt.Errorf("error preparing query CountListsByOrgID: %w", err)
	}
	if q.countObjectTypesStmt, err = db.PrepareContext(ctx, countObjectTypes); err != nil {
		return nil, fmt.Errorf("error preparing query CountObjectTypes: %w", err)
	}
	if q.countObjectsAdvancedStmt, err = db.PrepareContext(ctx, countObjectsAdvanced); err != nil {
		return nil, fmt.Errorf("error preparing query CountObjectsAdvanced: %w", err)
	}
	if q.countObjectsAfterCreatedAtStmt, err = db.PrepareContext(ctx, countObjectsAfterCreatedAt); err != nil {
		return nil, fmt.Errorf("error preparing query CountObjectsAfterCreatedAt: %w", err)
	}
	if q.countObjectsByOrgIDStmt, err = db.PrepareContext(ctx, countObjectsByOrgID); err != nil {
		return nil, fmt.Errorf("error preparing query CountObjectsByOrgID: %w", err)
	}
	if q.countObjectsByTypeWithAdvancedFilterStmt, err = db.PrepareContext(ctx, countObjectsByTypeWithAdvancedFilter); err != nil {
		return nil, fmt.Errorf("error preparing query CountObjectsByTypeWithAdvancedFilter: %w", err)
	}
	if q.countObjectsForStepStmt, err = db.PrepareContext(ctx, countObjectsForStep); err != nil {
		return nil, fmt.Errorf("error preparing query CountObjectsForStep: %w", err)
	}
	if q.countOngoingTaskStmt, err = db.PrepareContext(ctx, countOngoingTask); err != nil {
		return nil, fmt.Errorf("error preparing query CountOngoingTask: %w", err)
	}
	if q.countTagsStmt, err = db.PrepareContext(ctx, countTags); err != nil {
		return nil, fmt.Errorf("error preparing query CountTags: %w", err)
	}
	if q.countTasksByObjectIDStmt, err = db.PrepareContext(ctx, countTasksByObjectID); err != nil {
		return nil, fmt.Errorf("error preparing query CountTasksByObjectID: %w", err)
	}
	if q.countTasksByOrgIDStmt, err = db.PrepareContext(ctx, countTasksByOrgID); err != nil {
		return nil, fmt.Errorf("error preparing query CountTasksByOrgID: %w", err)
	}
	if q.countTasksWithFilterStmt, err = db.PrepareContext(ctx, countTasksWithFilter); err != nil {
		return nil, fmt.Errorf("error preparing query CountTasksWithFilter: %w", err)
	}
	if q.countUnseenFeedStmt, err = db.PrepareContext(ctx, countUnseenFeed); err != nil {
		return nil, fmt.Errorf("error preparing query CountUnseenFeed: %w", err)
	}
	if q.createActionExecutionStmt, err = db.PrepareContext(ctx, createActionExecution); err != nil {
		return nil, fmt.Errorf("error preparing query CreateActionExecution: %w", err)
	}
	if q.createAutomatedActionStmt, err = db.PrepareContext(ctx, createAutomatedAction); err != nil {
		return nil, fmt.Errorf("error preparing query CreateAutomatedAction: %w", err)
	}
	if q.createCreatorStmt, err = db.PrepareContext(ctx, createCreator); err != nil {
		return nil, fmt.Errorf("error preparing query CreateCreator: %w", err)
	}
	if q.createCreatorListStmt, err = db.PrepareContext(ctx, createCreatorList); err != nil {
		return nil, fmt.Errorf("error preparing query CreateCreatorList: %w", err)
	}
	if q.createFactStmt, err = db.PrepareContext(ctx, createFact); err != nil {
		return nil, fmt.Errorf("error preparing query CreateFact: %w", err)
	}
	if q.createFeedStmt, err = db.PrepareContext(ctx, createFeed); err != nil {
		return nil, fmt.Errorf("error preparing query CreateFeed: %w", err)
	}
	if q.createFunnelStmt, err = db.PrepareContext(ctx, createFunnel); err != nil {
		return nil, fmt.Errorf("error preparing query CreateFunnel: %w", err)
	}
	if q.createImportTaskStmt, err = db.PrepareContext(ctx, createImportTask); err != nil {
		return nil, fmt.Errorf("error preparing query CreateImportTask: %w", err)
	}
	if q.createListStmt, err = db.PrepareContext(ctx, createList); err != nil {
		return nil, fmt.Errorf("error preparing query CreateList: %w", err)
	}
	if q.createObjStepStmt, err = db.PrepareContext(ctx, createObjStep); err != nil {
		return nil, fmt.Errorf("error preparing query CreateObjStep: %w", err)
	}
	if q.createObjectStmt, err = db.PrepareContext(ctx, createObject); err != nil {
		return nil, fmt.Errorf("error preparing query CreateObject: %w", err)
	}
	if q.createObjectTypeStmt, err = db.PrepareContext(ctx, createObjectType); err != nil {
		return nil, fmt.Errorf("error preparing query CreateObjectType: %w", err)
	}
	if q.createOrganizationStmt, err = db.PrepareContext(ctx, createOrganization); err != nil {
		return nil, fmt.Errorf("error preparing query CreateOrganization: %w", err)
	}
	if q.createStepStmt, err = db.PrepareContext(ctx, createStep); err != nil {
		return nil, fmt.Errorf("error preparing query CreateStep: %w", err)
	}
	if q.createTagStmt, err = db.PrepareContext(ctx, createTag); err != nil {
		return nil, fmt.Errorf("error preparing query CreateTag: %w", err)
	}
	if q.createTaskStmt, err = db.PrepareContext(ctx, createTask); err != nil {
		return nil, fmt.Errorf("error preparing query CreateTask: %w", err)
	}
	if q.deleteActionOldExecutionsStmt, err = db.PrepareContext(ctx, deleteActionOldExecutions); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteActionOldExecutions: %w", err)
	}
	if q.deleteAutomatedActionStmt, err = db.PrepareContext(ctx, deleteAutomatedAction); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteAutomatedAction: %w", err)
	}
	if q.deleteCreatorStmt, err = db.PrepareContext(ctx, deleteCreator); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteCreator: %w", err)
	}
	if q.deleteCreatorListStmt, err = db.PrepareContext(ctx, deleteCreatorList); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteCreatorList: %w", err)
	}
	if q.deleteFactStmt, err = db.PrepareContext(ctx, deleteFact); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteFact: %w", err)
	}
	if q.deleteFunnelStmt, err = db.PrepareContext(ctx, deleteFunnel); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteFunnel: %w", err)
	}
	if q.deleteListStmt, err = db.PrepareContext(ctx, deleteList); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteList: %w", err)
	}
	if q.deleteObjectStmt, err = db.PrepareContext(ctx, deleteObject); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteObject: %w", err)
	}
	if q.deleteObjectTypeStmt, err = db.PrepareContext(ctx, deleteObjectType); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteObjectType: %w", err)
	}
	if q.deleteStepStmt, err = db.PrepareContext(ctx, deleteStep); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteStep: %w", err)
	}
	if q.deleteTagStmt, err = db.PrepareContext(ctx, deleteTag); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteTag: %w", err)
	}
	if q.deleteTaskStmt, err = db.PrepareContext(ctx, deleteTask); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteTask: %w", err)
	}
	if q.findObjectByAliasOrIDStringStmt, err = db.PrepareContext(ctx, findObjectByAliasOrIDString); err != nil {
		return nil, fmt.Errorf("error preparing query FindObjectByAliasOrIDString: %w", err)
	}
	if q.findTagByNormalizedNameStmt, err = db.PrepareContext(ctx, findTagByNormalizedName); err != nil {
		return nil, fmt.Errorf("error preparing query FindTagByNormalizedName: %w", err)
	}
	if q.getAutomatedActionStmt, err = db.PrepareContext(ctx, getAutomatedAction); err != nil {
		return nil, fmt.Errorf("error preparing query GetAutomatedAction: %w", err)
	}
	if q.getCreatorStmt, err = db.PrepareContext(ctx, getCreator); err != nil {
		return nil, fmt.Errorf("error preparing query GetCreator: %w", err)
	}
	if q.getCreatorByIDStmt, err = db.PrepareContext(ctx, getCreatorByID); err != nil {
		return nil, fmt.Errorf("error preparing query GetCreatorByID: %w", err)
	}
	if q.getCreatorByUsernameStmt, err = db.PrepareContext(ctx, getCreatorByUsername); err != nil {
		return nil, fmt.Errorf("error preparing query GetCreatorByUsername: %w", err)
	}
	if q.getCreatorDailyActivityStmt, err = db.PrepareContext(ctx, getCreatorDailyActivity); err != nil {
		return nil, fmt.Errorf("error preparing query GetCreatorDailyActivity: %w", err)
	}
	if q.getCreatorListByIDStmt, err = db.PrepareContext(ctx, getCreatorListByID); err != nil {
		return nil, fmt.Errorf("error preparing query GetCreatorListByID: %w", err)
	}
	if q.getFactByIDStmt, err = db.PrepareContext(ctx, getFactByID); err != nil {
		return nil, fmt.Errorf("error preparing query GetFactByID: %w", err)
	}
	if q.getFeedStmt, err = db.PrepareContext(ctx, getFeed); err != nil {
		return nil, fmt.Errorf("error preparing query GetFeed: %w", err)
	}
	if q.getFunnelStmt, err = db.PrepareContext(ctx, getFunnel); err != nil {
		return nil, fmt.Errorf("error preparing query GetFunnel: %w", err)
	}
	if q.getImportTaskStmt, err = db.PrepareContext(ctx, getImportTask); err != nil {
		return nil, fmt.Errorf("error preparing query GetImportTask: %w", err)
	}
	if q.getImportTaskHistoryStmt, err = db.PrepareContext(ctx, getImportTaskHistory); err != nil {
		return nil, fmt.Errorf("error preparing query GetImportTaskHistory: %w", err)
	}
	if q.getLatestExecutionStmt, err = db.PrepareContext(ctx, getLatestExecution); err != nil {
		return nil, fmt.Errorf("error preparing query GetLatestExecution: %w", err)
	}
	if q.getListByIDStmt, err = db.PrepareContext(ctx, getListByID); err != nil {
		return nil, fmt.Errorf("error preparing query GetListByID: %w", err)
	}
	if q.getObjStepStmt, err = db.PrepareContext(ctx, getObjStep); err != nil {
		return nil, fmt.Errorf("error preparing query GetObjStep: %w", err)
	}
	if q.getObjectByIDStringStmt, err = db.PrepareContext(ctx, getObjectByIDString); err != nil {
		return nil, fmt.Errorf("error preparing query GetObjectByIDString: %w", err)
	}
	if q.getObjectDetailsStmt, err = db.PrepareContext(ctx, getObjectDetails); err != nil {
		return nil, fmt.Errorf("error preparing query GetObjectDetails: %w", err)
	}
	if q.getObjectTypeByIDStmt, err = db.PrepareContext(ctx, getObjectTypeByID); err != nil {
		return nil, fmt.Errorf("error preparing query GetObjectTypeByID: %w", err)
	}
	if q.getObjectTypeValueStmt, err = db.PrepareContext(ctx, getObjectTypeValue); err != nil {
		return nil, fmt.Errorf("error preparing query GetObjectTypeValue: %w", err)
	}
	if q.getObjectsForStepStmt, err = db.PrepareContext(ctx, getObjectsForStep); err != nil {
		return nil, fmt.Errorf("error preparing query GetObjectsForStep: %w", err)
	}
	if q.getOngoingImportTaskStmt, err = db.PrepareContext(ctx, getOngoingImportTask); err != nil {
		return nil, fmt.Errorf("error preparing query GetOngoingImportTask: %w", err)
	}
	if q.getOrgDetailsStmt, err = db.PrepareContext(ctx, getOrgDetails); err != nil {
		return nil, fmt.Errorf("error preparing query GetOrgDetails: %w", err)
	}
	if q.getPendingActionsStmt, err = db.PrepareContext(ctx, getPendingActions); err != nil {
		return nil, fmt.Errorf("error preparing query GetPendingActions: %w", err)
	}
	if q.getStepStmt, err = db.PrepareContext(ctx, getStep); err != nil {
		return nil, fmt.Errorf("error preparing query GetStep: %w", err)
	}
	if q.getTagByIDStmt, err = db.PrepareContext(ctx, getTagByID); err != nil {
		return nil, fmt.Errorf("error preparing query GetTagByID: %w", err)
	}
	if q.getTagsByIDsStmt, err = db.PrepareContext(ctx, getTagsByIDs); err != nil {
		return nil, fmt.Errorf("error preparing query GetTagsByIDs: %w", err)
	}
	if q.getTaskByIDStmt, err = db.PrepareContext(ctx, getTaskByID); err != nil {
		return nil, fmt.Errorf("error preparing query GetTaskByID: %w", err)
	}
	if q.hardDeleteObjStepStmt, err = db.PrepareContext(ctx, hardDeleteObjStep); err != nil {
		return nil, fmt.Errorf("error preparing query HardDeleteObjStep: %w", err)
	}
	if q.healthCheckStmt, err = db.PrepareContext(ctx, healthCheck); err != nil {
		return nil, fmt.Errorf("error preparing query HealthCheck: %w", err)
	}
	if q.listActionExecutionsStmt, err = db.PrepareContext(ctx, listActionExecutions); err != nil {
		return nil, fmt.Errorf("error preparing query ListActionExecutions: %w", err)
	}
	if q.listAutomatedActionsStmt, err = db.PrepareContext(ctx, listAutomatedActions); err != nil {
		return nil, fmt.Errorf("error preparing query ListAutomatedActions: %w", err)
	}
	if q.listCreatorListsByCreatorIDStmt, err = db.PrepareContext(ctx, listCreatorListsByCreatorID); err != nil {
		return nil, fmt.Errorf("error preparing query ListCreatorListsByCreatorID: %w", err)
	}
	if q.listFactsByOrgIDStmt, err = db.PrepareContext(ctx, listFactsByOrgID); err != nil {
		return nil, fmt.Errorf("error preparing query ListFactsByOrgID: %w", err)
	}
	if q.listFunnelsStmt, err = db.PrepareContext(ctx, listFunnels); err != nil {
		return nil, fmt.Errorf("error preparing query ListFunnels: %w", err)
	}
	if q.listListsByOrgIDStmt, err = db.PrepareContext(ctx, listListsByOrgID); err != nil {
		return nil, fmt.Errorf("error preparing query ListListsByOrgID: %w", err)
	}
	if q.listObjectTypesStmt, err = db.PrepareContext(ctx, listObjectTypes); err != nil {
		return nil, fmt.Errorf("error preparing query ListObjectTypes: %w", err)
	}
	if q.listObjectsAdvancedStmt, err = db.PrepareContext(ctx, listObjectsAdvanced); err != nil {
		return nil, fmt.Errorf("error preparing query ListObjectsAdvanced: %w", err)
	}
	if q.listObjectsByOrgIDStmt, err = db.PrepareContext(ctx, listObjectsByOrgID); err != nil {
		return nil, fmt.Errorf("error preparing query ListObjectsByOrgID: %w", err)
	}
	if q.listObjectsByTaskIDStmt, err = db.PrepareContext(ctx, listObjectsByTaskID); err != nil {
		return nil, fmt.Errorf("error preparing query ListObjectsByTaskID: %w", err)
	}
	if q.listObjectsByTypeWithAdvancedFilterStmt, err = db.PrepareContext(ctx, listObjectsByTypeWithAdvancedFilter); err != nil {
		return nil, fmt.Errorf("error preparing query ListObjectsByTypeWithAdvancedFilter: %w", err)
	}
	if q.listObjectsWithNormalizedDataStmt, err = db.PrepareContext(ctx, listObjectsWithNormalizedData); err != nil {
		return nil, fmt.Errorf("error preparing query ListObjectsWithNormalizedData: %w", err)
	}
	if q.listOrgMembersStmt, err = db.PrepareContext(ctx, listOrgMembers); err != nil {
		return nil, fmt.Errorf("error preparing query ListOrgMembers: %w", err)
	}
	if q.listStepsByFunnelStmt, err = db.PrepareContext(ctx, listStepsByFunnel); err != nil {
		return nil, fmt.Errorf("error preparing query ListStepsByFunnel: %w", err)
	}
	if q.listTagsStmt, err = db.PrepareContext(ctx, listTags); err != nil {
		return nil, fmt.Errorf("error preparing query ListTags: %w", err)
	}
	if q.listTasksByObjectIDStmt, err = db.PrepareContext(ctx, listTasksByObjectID); err != nil {
		return nil, fmt.Errorf("error preparing query ListTasksByObjectID: %w", err)
	}
	if q.listTasksByOrgIDStmt, err = db.PrepareContext(ctx, listTasksByOrgID); err != nil {
		return nil, fmt.Errorf("error preparing query ListTasksByOrgID: %w", err)
	}
	if q.listTasksWithFilterStmt, err = db.PrepareContext(ctx, listTasksWithFilter); err != nil {
		return nil, fmt.Errorf("error preparing query ListTasksWithFilter: %w", err)
	}
	if q.markFeedAsSeenStmt, err = db.PrepareContext(ctx, markFeedAsSeen); err != nil {
		return nil, fmt.Errorf("error preparing query MarkFeedAsSeen: %w", err)
	}
	if q.mergeObjectsStmt, err = db.PrepareContext(ctx, mergeObjects); err != nil {
		return nil, fmt.Errorf("error preparing query MergeObjects: %w", err)
	}
	if q.removeObjectTypeValueStmt, err = db.PrepareContext(ctx, removeObjectTypeValue); err != nil {
		return nil, fmt.Errorf("error preparing query RemoveObjectTypeValue: %w", err)
	}
	if q.removeObjectsFromFactStmt, err = db.PrepareContext(ctx, removeObjectsFromFact); err != nil {
		return nil, fmt.Errorf("error preparing query RemoveObjectsFromFact: %w", err)
	}
	if q.removeObjectsFromTaskStmt, err = db.PrepareContext(ctx, removeObjectsFromTask); err != nil {
		return nil, fmt.Errorf("error preparing query RemoveObjectsFromTask: %w", err)
	}
	if q.removeTagFromObjectStmt, err = db.PrepareContext(ctx, removeTagFromObject); err != nil {
		return nil, fmt.Errorf("error preparing query RemoveTagFromObject: %w", err)
	}
	if q.softDeleteObjStepStmt, err = db.PrepareContext(ctx, softDeleteObjStep); err != nil {
		return nil, fmt.Errorf("error preparing query SoftDeleteObjStep: %w", err)
	}
	if q.updateActionExecutionStmt, err = db.PrepareContext(ctx, updateActionExecution); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateActionExecution: %w", err)
	}
	if q.updateActionLastRunStmt, err = db.PrepareContext(ctx, updateActionLastRun); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateActionLastRun: %w", err)
	}
	if q.updateAutomatedActionStmt, err = db.PrepareContext(ctx, updateAutomatedAction); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateAutomatedAction: %w", err)
	}
	if q.updateCreatorListStmt, err = db.PrepareContext(ctx, updateCreatorList); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateCreatorList: %w", err)
	}
	if q.updateFactStmt, err = db.PrepareContext(ctx, updateFact); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateFact: %w", err)
	}
	if q.updateFunnelStmt, err = db.PrepareContext(ctx, updateFunnel); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateFunnel: %w", err)
	}
	if q.updateImportTaskErrorStmt, err = db.PrepareContext(ctx, updateImportTaskError); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateImportTaskError: %w", err)
	}
	if q.updateImportTaskProgressStmt, err = db.PrepareContext(ctx, updateImportTaskProgress); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateImportTaskProgress: %w", err)
	}
	if q.updateImportTaskStatusStmt, err = db.PrepareContext(ctx, updateImportTaskStatus); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateImportTaskStatus: %w", err)
	}
	if q.updateListStmt, err = db.PrepareContext(ctx, updateList); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateList: %w", err)
	}
	if q.updateObjStepStmt, err = db.PrepareContext(ctx, updateObjStep); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateObjStep: %w", err)
	}
	if q.updateObjStepSubStatusStmt, err = db.PrepareContext(ctx, updateObjStepSubStatus); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateObjStepSubStatus: %w", err)
	}
	if q.updateObjectStmt, err = db.PrepareContext(ctx, updateObject); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateObject: %w", err)
	}
	if q.updateObjectTypeStmt, err = db.PrepareContext(ctx, updateObjectType); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateObjectType: %w", err)
	}
	if q.updateObjectTypeValueStmt, err = db.PrepareContext(ctx, updateObjectTypeValue); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateObjectTypeValue: %w", err)
	}
	if q.updateOrgDetailsStmt, err = db.PrepareContext(ctx, updateOrgDetails); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateOrgDetails: %w", err)
	}
	if q.updateStepStmt, err = db.PrepareContext(ctx, updateStep); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateStep: %w", err)
	}
	if q.updateTagStmt, err = db.PrepareContext(ctx, updateTag); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateTag: %w", err)
	}
	if q.updateTaskStmt, err = db.PrepareContext(ctx, updateTask); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateTask: %w", err)
	}
	if q.updateUserPasswordStmt, err = db.PrepareContext(ctx, updateUserPassword); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateUserPassword: %w", err)
	}
	if q.updateUserProfileStmt, err = db.PrepareContext(ctx, updateUserProfile); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateUserProfile: %w", err)
	}
	if q.updateUserRoleAndStatusStmt, err = db.PrepareContext(ctx, updateUserRoleAndStatus); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateUserRoleAndStatus: %w", err)
	}
	if q.upsertObjectTypeValueStmt, err = db.PrepareContext(ctx, upsertObjectTypeValue); err != nil {
		return nil, fmt.Errorf("error preparing query UpsertObjectTypeValue: %w", err)
	}
	if q.validateMergeObjectsStmt, err = db.PrepareContext(ctx, validateMergeObjects); err != nil {
		return nil, fmt.Errorf("error preparing query ValidateMergeObjects: %w", err)
	}
	return &q, nil
}

func (q *Queries) Close() error {
	var err error
	if q.addObjectTypeValueStmt != nil {
		if cerr := q.addObjectTypeValueStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing addObjectTypeValueStmt: %w", cerr)
		}
	}
	if q.addObjectsToFactStmt != nil {
		if cerr := q.addObjectsToFactStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing addObjectsToFactStmt: %w", cerr)
		}
	}
	if q.addObjectsToTaskStmt != nil {
		if cerr := q.addObjectsToTaskStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing addObjectsToTaskStmt: %w", cerr)
		}
	}
	if q.addTagAndStepToFilteredObjectsStmt != nil {
		if cerr := q.addTagAndStepToFilteredObjectsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing addTagAndStepToFilteredObjectsStmt: %w", cerr)
		}
	}
	if q.addTagToObjectStmt != nil {
		if cerr := q.addTagToObjectStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing addTagToObjectStmt: %w", cerr)
		}
	}
	if q.completeImportTaskStmt != nil {
		if cerr := q.completeImportTaskStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing completeImportTaskStmt: %w", cerr)
		}
	}
	if q.countActionExecutionsStmt != nil {
		if cerr := q.countActionExecutionsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing countActionExecutionsStmt: %w", cerr)
		}
	}
	if q.countAutomatedActionsStmt != nil {
		if cerr := q.countAutomatedActionsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing countAutomatedActionsStmt: %w", cerr)
		}
	}
	if q.countFactsByOrgIDStmt != nil {
		if cerr := q.countFactsByOrgIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing countFactsByOrgIDStmt: %w", cerr)
		}
	}
	if q.countFunnelsStmt != nil {
		if cerr := q.countFunnelsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing countFunnelsStmt: %w", cerr)
		}
	}
	if q.countImportTasksStmt != nil {
		if cerr := q.countImportTasksStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing countImportTasksStmt: %w", cerr)
		}
	}
	if q.countListsByOrgIDStmt != nil {
		if cerr := q.countListsByOrgIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing countListsByOrgIDStmt: %w", cerr)
		}
	}
	if q.countObjectTypesStmt != nil {
		if cerr := q.countObjectTypesStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing countObjectTypesStmt: %w", cerr)
		}
	}
	if q.countObjectsAdvancedStmt != nil {
		if cerr := q.countObjectsAdvancedStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing countObjectsAdvancedStmt: %w", cerr)
		}
	}
	if q.countObjectsAfterCreatedAtStmt != nil {
		if cerr := q.countObjectsAfterCreatedAtStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing countObjectsAfterCreatedAtStmt: %w", cerr)
		}
	}
	if q.countObjectsByOrgIDStmt != nil {
		if cerr := q.countObjectsByOrgIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing countObjectsByOrgIDStmt: %w", cerr)
		}
	}
	if q.countObjectsByTypeWithAdvancedFilterStmt != nil {
		if cerr := q.countObjectsByTypeWithAdvancedFilterStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing countObjectsByTypeWithAdvancedFilterStmt: %w", cerr)
		}
	}
	if q.countObjectsForStepStmt != nil {
		if cerr := q.countObjectsForStepStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing countObjectsForStepStmt: %w", cerr)
		}
	}
	if q.countOngoingTaskStmt != nil {
		if cerr := q.countOngoingTaskStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing countOngoingTaskStmt: %w", cerr)
		}
	}
	if q.countTagsStmt != nil {
		if cerr := q.countTagsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing countTagsStmt: %w", cerr)
		}
	}
	if q.countTasksByObjectIDStmt != nil {
		if cerr := q.countTasksByObjectIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing countTasksByObjectIDStmt: %w", cerr)
		}
	}
	if q.countTasksByOrgIDStmt != nil {
		if cerr := q.countTasksByOrgIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing countTasksByOrgIDStmt: %w", cerr)
		}
	}
	if q.countTasksWithFilterStmt != nil {
		if cerr := q.countTasksWithFilterStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing countTasksWithFilterStmt: %w", cerr)
		}
	}
	if q.countUnseenFeedStmt != nil {
		if cerr := q.countUnseenFeedStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing countUnseenFeedStmt: %w", cerr)
		}
	}
	if q.createActionExecutionStmt != nil {
		if cerr := q.createActionExecutionStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createActionExecutionStmt: %w", cerr)
		}
	}
	if q.createAutomatedActionStmt != nil {
		if cerr := q.createAutomatedActionStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createAutomatedActionStmt: %w", cerr)
		}
	}
	if q.createCreatorStmt != nil {
		if cerr := q.createCreatorStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createCreatorStmt: %w", cerr)
		}
	}
	if q.createCreatorListStmt != nil {
		if cerr := q.createCreatorListStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createCreatorListStmt: %w", cerr)
		}
	}
	if q.createFactStmt != nil {
		if cerr := q.createFactStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createFactStmt: %w", cerr)
		}
	}
	if q.createFeedStmt != nil {
		if cerr := q.createFeedStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createFeedStmt: %w", cerr)
		}
	}
	if q.createFunnelStmt != nil {
		if cerr := q.createFunnelStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createFunnelStmt: %w", cerr)
		}
	}
	if q.createImportTaskStmt != nil {
		if cerr := q.createImportTaskStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createImportTaskStmt: %w", cerr)
		}
	}
	if q.createListStmt != nil {
		if cerr := q.createListStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createListStmt: %w", cerr)
		}
	}
	if q.createObjStepStmt != nil {
		if cerr := q.createObjStepStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createObjStepStmt: %w", cerr)
		}
	}
	if q.createObjectStmt != nil {
		if cerr := q.createObjectStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createObjectStmt: %w", cerr)
		}
	}
	if q.createObjectTypeStmt != nil {
		if cerr := q.createObjectTypeStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createObjectTypeStmt: %w", cerr)
		}
	}
	if q.createOrganizationStmt != nil {
		if cerr := q.createOrganizationStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createOrganizationStmt: %w", cerr)
		}
	}
	if q.createStepStmt != nil {
		if cerr := q.createStepStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createStepStmt: %w", cerr)
		}
	}
	if q.createTagStmt != nil {
		if cerr := q.createTagStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createTagStmt: %w", cerr)
		}
	}
	if q.createTaskStmt != nil {
		if cerr := q.createTaskStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createTaskStmt: %w", cerr)
		}
	}
	if q.deleteActionOldExecutionsStmt != nil {
		if cerr := q.deleteActionOldExecutionsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteActionOldExecutionsStmt: %w", cerr)
		}
	}
	if q.deleteAutomatedActionStmt != nil {
		if cerr := q.deleteAutomatedActionStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteAutomatedActionStmt: %w", cerr)
		}
	}
	if q.deleteCreatorStmt != nil {
		if cerr := q.deleteCreatorStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteCreatorStmt: %w", cerr)
		}
	}
	if q.deleteCreatorListStmt != nil {
		if cerr := q.deleteCreatorListStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteCreatorListStmt: %w", cerr)
		}
	}
	if q.deleteFactStmt != nil {
		if cerr := q.deleteFactStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteFactStmt: %w", cerr)
		}
	}
	if q.deleteFunnelStmt != nil {
		if cerr := q.deleteFunnelStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteFunnelStmt: %w", cerr)
		}
	}
	if q.deleteListStmt != nil {
		if cerr := q.deleteListStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteListStmt: %w", cerr)
		}
	}
	if q.deleteObjectStmt != nil {
		if cerr := q.deleteObjectStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteObjectStmt: %w", cerr)
		}
	}
	if q.deleteObjectTypeStmt != nil {
		if cerr := q.deleteObjectTypeStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteObjectTypeStmt: %w", cerr)
		}
	}
	if q.deleteStepStmt != nil {
		if cerr := q.deleteStepStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteStepStmt: %w", cerr)
		}
	}
	if q.deleteTagStmt != nil {
		if cerr := q.deleteTagStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteTagStmt: %w", cerr)
		}
	}
	if q.deleteTaskStmt != nil {
		if cerr := q.deleteTaskStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteTaskStmt: %w", cerr)
		}
	}
	if q.findObjectByAliasOrIDStringStmt != nil {
		if cerr := q.findObjectByAliasOrIDStringStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing findObjectByAliasOrIDStringStmt: %w", cerr)
		}
	}
	if q.findTagByNormalizedNameStmt != nil {
		if cerr := q.findTagByNormalizedNameStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing findTagByNormalizedNameStmt: %w", cerr)
		}
	}
	if q.getAutomatedActionStmt != nil {
		if cerr := q.getAutomatedActionStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getAutomatedActionStmt: %w", cerr)
		}
	}
	if q.getCreatorStmt != nil {
		if cerr := q.getCreatorStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getCreatorStmt: %w", cerr)
		}
	}
	if q.getCreatorByIDStmt != nil {
		if cerr := q.getCreatorByIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getCreatorByIDStmt: %w", cerr)
		}
	}
	if q.getCreatorByUsernameStmt != nil {
		if cerr := q.getCreatorByUsernameStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getCreatorByUsernameStmt: %w", cerr)
		}
	}
	if q.getCreatorDailyActivityStmt != nil {
		if cerr := q.getCreatorDailyActivityStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getCreatorDailyActivityStmt: %w", cerr)
		}
	}
	if q.getCreatorListByIDStmt != nil {
		if cerr := q.getCreatorListByIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getCreatorListByIDStmt: %w", cerr)
		}
	}
	if q.getFactByIDStmt != nil {
		if cerr := q.getFactByIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getFactByIDStmt: %w", cerr)
		}
	}
	if q.getFeedStmt != nil {
		if cerr := q.getFeedStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getFeedStmt: %w", cerr)
		}
	}
	if q.getFunnelStmt != nil {
		if cerr := q.getFunnelStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getFunnelStmt: %w", cerr)
		}
	}
	if q.getImportTaskStmt != nil {
		if cerr := q.getImportTaskStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getImportTaskStmt: %w", cerr)
		}
	}
	if q.getImportTaskHistoryStmt != nil {
		if cerr := q.getImportTaskHistoryStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getImportTaskHistoryStmt: %w", cerr)
		}
	}
	if q.getLatestExecutionStmt != nil {
		if cerr := q.getLatestExecutionStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getLatestExecutionStmt: %w", cerr)
		}
	}
	if q.getListByIDStmt != nil {
		if cerr := q.getListByIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getListByIDStmt: %w", cerr)
		}
	}
	if q.getObjStepStmt != nil {
		if cerr := q.getObjStepStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getObjStepStmt: %w", cerr)
		}
	}
	if q.getObjectByIDStringStmt != nil {
		if cerr := q.getObjectByIDStringStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getObjectByIDStringStmt: %w", cerr)
		}
	}
	if q.getObjectDetailsStmt != nil {
		if cerr := q.getObjectDetailsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getObjectDetailsStmt: %w", cerr)
		}
	}
	if q.getObjectTypeByIDStmt != nil {
		if cerr := q.getObjectTypeByIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getObjectTypeByIDStmt: %w", cerr)
		}
	}
	if q.getObjectTypeValueStmt != nil {
		if cerr := q.getObjectTypeValueStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getObjectTypeValueStmt: %w", cerr)
		}
	}
	if q.getObjectsForStepStmt != nil {
		if cerr := q.getObjectsForStepStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getObjectsForStepStmt: %w", cerr)
		}
	}
	if q.getOngoingImportTaskStmt != nil {
		if cerr := q.getOngoingImportTaskStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getOngoingImportTaskStmt: %w", cerr)
		}
	}
	if q.getOrgDetailsStmt != nil {
		if cerr := q.getOrgDetailsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getOrgDetailsStmt: %w", cerr)
		}
	}
	if q.getPendingActionsStmt != nil {
		if cerr := q.getPendingActionsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getPendingActionsStmt: %w", cerr)
		}
	}
	if q.getStepStmt != nil {
		if cerr := q.getStepStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getStepStmt: %w", cerr)
		}
	}
	if q.getTagByIDStmt != nil {
		if cerr := q.getTagByIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getTagByIDStmt: %w", cerr)
		}
	}
	if q.getTagsByIDsStmt != nil {
		if cerr := q.getTagsByIDsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getTagsByIDsStmt: %w", cerr)
		}
	}
	if q.getTaskByIDStmt != nil {
		if cerr := q.getTaskByIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getTaskByIDStmt: %w", cerr)
		}
	}
	if q.hardDeleteObjStepStmt != nil {
		if cerr := q.hardDeleteObjStepStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing hardDeleteObjStepStmt: %w", cerr)
		}
	}
	if q.healthCheckStmt != nil {
		if cerr := q.healthCheckStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing healthCheckStmt: %w", cerr)
		}
	}
	if q.listActionExecutionsStmt != nil {
		if cerr := q.listActionExecutionsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listActionExecutionsStmt: %w", cerr)
		}
	}
	if q.listAutomatedActionsStmt != nil {
		if cerr := q.listAutomatedActionsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listAutomatedActionsStmt: %w", cerr)
		}
	}
	if q.listCreatorListsByCreatorIDStmt != nil {
		if cerr := q.listCreatorListsByCreatorIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listCreatorListsByCreatorIDStmt: %w", cerr)
		}
	}
	if q.listFactsByOrgIDStmt != nil {
		if cerr := q.listFactsByOrgIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listFactsByOrgIDStmt: %w", cerr)
		}
	}
	if q.listFunnelsStmt != nil {
		if cerr := q.listFunnelsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listFunnelsStmt: %w", cerr)
		}
	}
	if q.listListsByOrgIDStmt != nil {
		if cerr := q.listListsByOrgIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listListsByOrgIDStmt: %w", cerr)
		}
	}
	if q.listObjectTypesStmt != nil {
		if cerr := q.listObjectTypesStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listObjectTypesStmt: %w", cerr)
		}
	}
	if q.listObjectsAdvancedStmt != nil {
		if cerr := q.listObjectsAdvancedStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listObjectsAdvancedStmt: %w", cerr)
		}
	}
	if q.listObjectsByOrgIDStmt != nil {
		if cerr := q.listObjectsByOrgIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listObjectsByOrgIDStmt: %w", cerr)
		}
	}
	if q.listObjectsByTaskIDStmt != nil {
		if cerr := q.listObjectsByTaskIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listObjectsByTaskIDStmt: %w", cerr)
		}
	}
	if q.listObjectsByTypeWithAdvancedFilterStmt != nil {
		if cerr := q.listObjectsByTypeWithAdvancedFilterStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listObjectsByTypeWithAdvancedFilterStmt: %w", cerr)
		}
	}
	if q.listObjectsWithNormalizedDataStmt != nil {
		if cerr := q.listObjectsWithNormalizedDataStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listObjectsWithNormalizedDataStmt: %w", cerr)
		}
	}
	if q.listOrgMembersStmt != nil {
		if cerr := q.listOrgMembersStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listOrgMembersStmt: %w", cerr)
		}
	}
	if q.listStepsByFunnelStmt != nil {
		if cerr := q.listStepsByFunnelStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listStepsByFunnelStmt: %w", cerr)
		}
	}
	if q.listTagsStmt != nil {
		if cerr := q.listTagsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listTagsStmt: %w", cerr)
		}
	}
	if q.listTasksByObjectIDStmt != nil {
		if cerr := q.listTasksByObjectIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listTasksByObjectIDStmt: %w", cerr)
		}
	}
	if q.listTasksByOrgIDStmt != nil {
		if cerr := q.listTasksByOrgIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listTasksByOrgIDStmt: %w", cerr)
		}
	}
	if q.listTasksWithFilterStmt != nil {
		if cerr := q.listTasksWithFilterStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listTasksWithFilterStmt: %w", cerr)
		}
	}
	if q.markFeedAsSeenStmt != nil {
		if cerr := q.markFeedAsSeenStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing markFeedAsSeenStmt: %w", cerr)
		}
	}
	if q.mergeObjectsStmt != nil {
		if cerr := q.mergeObjectsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing mergeObjectsStmt: %w", cerr)
		}
	}
	if q.removeObjectTypeValueStmt != nil {
		if cerr := q.removeObjectTypeValueStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing removeObjectTypeValueStmt: %w", cerr)
		}
	}
	if q.removeObjectsFromFactStmt != nil {
		if cerr := q.removeObjectsFromFactStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing removeObjectsFromFactStmt: %w", cerr)
		}
	}
	if q.removeObjectsFromTaskStmt != nil {
		if cerr := q.removeObjectsFromTaskStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing removeObjectsFromTaskStmt: %w", cerr)
		}
	}
	if q.removeTagFromObjectStmt != nil {
		if cerr := q.removeTagFromObjectStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing removeTagFromObjectStmt: %w", cerr)
		}
	}
	if q.softDeleteObjStepStmt != nil {
		if cerr := q.softDeleteObjStepStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing softDeleteObjStepStmt: %w", cerr)
		}
	}
	if q.updateActionExecutionStmt != nil {
		if cerr := q.updateActionExecutionStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateActionExecutionStmt: %w", cerr)
		}
	}
	if q.updateActionLastRunStmt != nil {
		if cerr := q.updateActionLastRunStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateActionLastRunStmt: %w", cerr)
		}
	}
	if q.updateAutomatedActionStmt != nil {
		if cerr := q.updateAutomatedActionStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateAutomatedActionStmt: %w", cerr)
		}
	}
	if q.updateCreatorListStmt != nil {
		if cerr := q.updateCreatorListStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateCreatorListStmt: %w", cerr)
		}
	}
	if q.updateFactStmt != nil {
		if cerr := q.updateFactStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateFactStmt: %w", cerr)
		}
	}
	if q.updateFunnelStmt != nil {
		if cerr := q.updateFunnelStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateFunnelStmt: %w", cerr)
		}
	}
	if q.updateImportTaskErrorStmt != nil {
		if cerr := q.updateImportTaskErrorStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateImportTaskErrorStmt: %w", cerr)
		}
	}
	if q.updateImportTaskProgressStmt != nil {
		if cerr := q.updateImportTaskProgressStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateImportTaskProgressStmt: %w", cerr)
		}
	}
	if q.updateImportTaskStatusStmt != nil {
		if cerr := q.updateImportTaskStatusStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateImportTaskStatusStmt: %w", cerr)
		}
	}
	if q.updateListStmt != nil {
		if cerr := q.updateListStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateListStmt: %w", cerr)
		}
	}
	if q.updateObjStepStmt != nil {
		if cerr := q.updateObjStepStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateObjStepStmt: %w", cerr)
		}
	}
	if q.updateObjStepSubStatusStmt != nil {
		if cerr := q.updateObjStepSubStatusStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateObjStepSubStatusStmt: %w", cerr)
		}
	}
	if q.updateObjectStmt != nil {
		if cerr := q.updateObjectStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateObjectStmt: %w", cerr)
		}
	}
	if q.updateObjectTypeStmt != nil {
		if cerr := q.updateObjectTypeStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateObjectTypeStmt: %w", cerr)
		}
	}
	if q.updateObjectTypeValueStmt != nil {
		if cerr := q.updateObjectTypeValueStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateObjectTypeValueStmt: %w", cerr)
		}
	}
	if q.updateOrgDetailsStmt != nil {
		if cerr := q.updateOrgDetailsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateOrgDetailsStmt: %w", cerr)
		}
	}
	if q.updateStepStmt != nil {
		if cerr := q.updateStepStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateStepStmt: %w", cerr)
		}
	}
	if q.updateTagStmt != nil {
		if cerr := q.updateTagStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateTagStmt: %w", cerr)
		}
	}
	if q.updateTaskStmt != nil {
		if cerr := q.updateTaskStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateTaskStmt: %w", cerr)
		}
	}
	if q.updateUserPasswordStmt != nil {
		if cerr := q.updateUserPasswordStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateUserPasswordStmt: %w", cerr)
		}
	}
	if q.updateUserProfileStmt != nil {
		if cerr := q.updateUserProfileStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateUserProfileStmt: %w", cerr)
		}
	}
	if q.updateUserRoleAndStatusStmt != nil {
		if cerr := q.updateUserRoleAndStatusStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateUserRoleAndStatusStmt: %w", cerr)
		}
	}
	if q.upsertObjectTypeValueStmt != nil {
		if cerr := q.upsertObjectTypeValueStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing upsertObjectTypeValueStmt: %w", cerr)
		}
	}
	if q.validateMergeObjectsStmt != nil {
		if cerr := q.validateMergeObjectsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing validateMergeObjectsStmt: %w", cerr)
		}
	}
	return err
}

func (q *Queries) exec(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (sql.Result, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).ExecContext(ctx, args...)
	case stmt != nil:
		return stmt.ExecContext(ctx, args...)
	default:
		return q.db.ExecContext(ctx, query, args...)
	}
}

func (q *Queries) query(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (*sql.Rows, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryContext(ctx, args...)
	default:
		return q.db.QueryContext(ctx, query, args...)
	}
}

func (q *Queries) queryRow(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) *sql.Row {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryRowContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryRowContext(ctx, args...)
	default:
		return q.db.QueryRowContext(ctx, query, args...)
	}
}

type Queries struct {
	db                                       DBTX
	tx                                       *sql.Tx
	addObjectTypeValueStmt                   *sql.Stmt
	addObjectsToFactStmt                     *sql.Stmt
	addObjectsToTaskStmt                     *sql.Stmt
	addTagAndStepToFilteredObjectsStmt       *sql.Stmt
	addTagToObjectStmt                       *sql.Stmt
	completeImportTaskStmt                   *sql.Stmt
	countActionExecutionsStmt                *sql.Stmt
	countAutomatedActionsStmt                *sql.Stmt
	countFactsByOrgIDStmt                    *sql.Stmt
	countFunnelsStmt                         *sql.Stmt
	countImportTasksStmt                     *sql.Stmt
	countListsByOrgIDStmt                    *sql.Stmt
	countObjectTypesStmt                     *sql.Stmt
	countObjectsAdvancedStmt                 *sql.Stmt
	countObjectsAfterCreatedAtStmt           *sql.Stmt
	countObjectsByOrgIDStmt                  *sql.Stmt
	countObjectsByTypeWithAdvancedFilterStmt *sql.Stmt
	countObjectsForStepStmt                  *sql.Stmt
	countOngoingTaskStmt                     *sql.Stmt
	countTagsStmt                            *sql.Stmt
	countTasksByObjectIDStmt                 *sql.Stmt
	countTasksByOrgIDStmt                    *sql.Stmt
	countTasksWithFilterStmt                 *sql.Stmt
	countUnseenFeedStmt                      *sql.Stmt
	createActionExecutionStmt                *sql.Stmt
	createAutomatedActionStmt                *sql.Stmt
	createCreatorStmt                        *sql.Stmt
	createCreatorListStmt                    *sql.Stmt
	createFactStmt                           *sql.Stmt
	createFeedStmt                           *sql.Stmt
	createFunnelStmt                         *sql.Stmt
	createImportTaskStmt                     *sql.Stmt
	createListStmt                           *sql.Stmt
	createObjStepStmt                        *sql.Stmt
	createObjectStmt                         *sql.Stmt
	createObjectTypeStmt                     *sql.Stmt
	createOrganizationStmt                   *sql.Stmt
	createStepStmt                           *sql.Stmt
	createTagStmt                            *sql.Stmt
	createTaskStmt                           *sql.Stmt
	deleteActionOldExecutionsStmt            *sql.Stmt
	deleteAutomatedActionStmt                *sql.Stmt
	deleteCreatorStmt                        *sql.Stmt
	deleteCreatorListStmt                    *sql.Stmt
	deleteFactStmt                           *sql.Stmt
	deleteFunnelStmt                         *sql.Stmt
	deleteListStmt                           *sql.Stmt
	deleteObjectStmt                         *sql.Stmt
	deleteObjectTypeStmt                     *sql.Stmt
	deleteStepStmt                           *sql.Stmt
	deleteTagStmt                            *sql.Stmt
	deleteTaskStmt                           *sql.Stmt
	findObjectByAliasOrIDStringStmt          *sql.Stmt
	findTagByNormalizedNameStmt              *sql.Stmt
	getAutomatedActionStmt                   *sql.Stmt
	getCreatorStmt                           *sql.Stmt
	getCreatorByIDStmt                       *sql.Stmt
	getCreatorByUsernameStmt                 *sql.Stmt
	getCreatorDailyActivityStmt              *sql.Stmt
	getCreatorListByIDStmt                   *sql.Stmt
	getFactByIDStmt                          *sql.Stmt
	getFeedStmt                              *sql.Stmt
	getFunnelStmt                            *sql.Stmt
	getImportTaskStmt                        *sql.Stmt
	getImportTaskHistoryStmt                 *sql.Stmt
	getLatestExecutionStmt                   *sql.Stmt
	getListByIDStmt                          *sql.Stmt
	getObjStepStmt                           *sql.Stmt
	getObjectByIDStringStmt                  *sql.Stmt
	getObjectDetailsStmt                     *sql.Stmt
	getObjectTypeByIDStmt                    *sql.Stmt
	getObjectTypeValueStmt                   *sql.Stmt
	getObjectsForStepStmt                    *sql.Stmt
	getOngoingImportTaskStmt                 *sql.Stmt
	getOrgDetailsStmt                        *sql.Stmt
	getPendingActionsStmt                    *sql.Stmt
	getStepStmt                              *sql.Stmt
	getTagByIDStmt                           *sql.Stmt
	getTagsByIDsStmt                         *sql.Stmt
	getTaskByIDStmt                          *sql.Stmt
	hardDeleteObjStepStmt                    *sql.Stmt
	healthCheckStmt                          *sql.Stmt
	listActionExecutionsStmt                 *sql.Stmt
	listAutomatedActionsStmt                 *sql.Stmt
	listCreatorListsByCreatorIDStmt          *sql.Stmt
	listFactsByOrgIDStmt                     *sql.Stmt
	listFunnelsStmt                          *sql.Stmt
	listListsByOrgIDStmt                     *sql.Stmt
	listObjectTypesStmt                      *sql.Stmt
	listObjectsAdvancedStmt                  *sql.Stmt
	listObjectsByOrgIDStmt                   *sql.Stmt
	listObjectsByTaskIDStmt                  *sql.Stmt
	listObjectsByTypeWithAdvancedFilterStmt  *sql.Stmt
	listObjectsWithNormalizedDataStmt        *sql.Stmt
	listOrgMembersStmt                       *sql.Stmt
	listStepsByFunnelStmt                    *sql.Stmt
	listTagsStmt                             *sql.Stmt
	listTasksByObjectIDStmt                  *sql.Stmt
	listTasksByOrgIDStmt                     *sql.Stmt
	listTasksWithFilterStmt                  *sql.Stmt
	markFeedAsSeenStmt                       *sql.Stmt
	mergeObjectsStmt                         *sql.Stmt
	removeObjectTypeValueStmt                *sql.Stmt
	removeObjectsFromFactStmt                *sql.Stmt
	removeObjectsFromTaskStmt                *sql.Stmt
	removeTagFromObjectStmt                  *sql.Stmt
	softDeleteObjStepStmt                    *sql.Stmt
	updateActionExecutionStmt                *sql.Stmt
	updateActionLastRunStmt                  *sql.Stmt
	updateAutomatedActionStmt                *sql.Stmt
	updateCreatorListStmt                    *sql.Stmt
	updateFactStmt                           *sql.Stmt
	updateFunnelStmt                         *sql.Stmt
	updateImportTaskErrorStmt                *sql.Stmt
	updateImportTaskProgressStmt             *sql.Stmt
	updateImportTaskStatusStmt               *sql.Stmt
	updateListStmt                           *sql.Stmt
	updateObjStepStmt                        *sql.Stmt
	updateObjStepSubStatusStmt               *sql.Stmt
	updateObjectStmt                         *sql.Stmt
	updateObjectTypeStmt                     *sql.Stmt
	updateObjectTypeValueStmt                *sql.Stmt
	updateOrgDetailsStmt                     *sql.Stmt
	updateStepStmt                           *sql.Stmt
	updateTagStmt                            *sql.Stmt
	updateTaskStmt                           *sql.Stmt
	updateUserPasswordStmt                   *sql.Stmt
	updateUserProfileStmt                    *sql.Stmt
	updateUserRoleAndStatusStmt              *sql.Stmt
	upsertObjectTypeValueStmt                *sql.Stmt
	validateMergeObjectsStmt                 *sql.Stmt
}

func (q *Queries) WithTx(tx *sql.Tx) *Queries {
	return &Queries{
		db:                                       tx,
		tx:                                       tx,
		addObjectTypeValueStmt:                   q.addObjectTypeValueStmt,
		addObjectsToFactStmt:                     q.addObjectsToFactStmt,
		addObjectsToTaskStmt:                     q.addObjectsToTaskStmt,
		addTagAndStepToFilteredObjectsStmt:       q.addTagAndStepToFilteredObjectsStmt,
		addTagToObjectStmt:                       q.addTagToObjectStmt,
		completeImportTaskStmt:                   q.completeImportTaskStmt,
		countActionExecutionsStmt:                q.countActionExecutionsStmt,
		countAutomatedActionsStmt:                q.countAutomatedActionsStmt,
		countFactsByOrgIDStmt:                    q.countFactsByOrgIDStmt,
		countFunnelsStmt:                         q.countFunnelsStmt,
		countImportTasksStmt:                     q.countImportTasksStmt,
		countListsByOrgIDStmt:                    q.countListsByOrgIDStmt,
		countObjectTypesStmt:                     q.countObjectTypesStmt,
		countObjectsAdvancedStmt:                 q.countObjectsAdvancedStmt,
		countObjectsAfterCreatedAtStmt:           q.countObjectsAfterCreatedAtStmt,
		countObjectsByOrgIDStmt:                  q.countObjectsByOrgIDStmt,
		countObjectsByTypeWithAdvancedFilterStmt: q.countObjectsByTypeWithAdvancedFilterStmt,
		countObjectsForStepStmt:                  q.countObjectsForStepStmt,
		countOngoingTaskStmt:                     q.countOngoingTaskStmt,
		countTagsStmt:                            q.countTagsStmt,
		countTasksByObjectIDStmt:                 q.countTasksByObjectIDStmt,
		countTasksByOrgIDStmt:                    q.countTasksByOrgIDStmt,
		countTasksWithFilterStmt:                 q.countTasksWithFilterStmt,
		countUnseenFeedStmt:                      q.countUnseenFeedStmt,
		createActionExecutionStmt:                q.createActionExecutionStmt,
		createAutomatedActionStmt:                q.createAutomatedActionStmt,
		createCreatorStmt:                        q.createCreatorStmt,
		createCreatorListStmt:                    q.createCreatorListStmt,
		createFactStmt:                           q.createFactStmt,
		createFeedStmt:                           q.createFeedStmt,
		createFunnelStmt:                         q.createFunnelStmt,
		createImportTaskStmt:                     q.createImportTaskStmt,
		createListStmt:                           q.createListStmt,
		createObjStepStmt:                        q.createObjStepStmt,
		createObjectStmt:                         q.createObjectStmt,
		createObjectTypeStmt:                     q.createObjectTypeStmt,
		createOrganizationStmt:                   q.createOrganizationStmt,
		createStepStmt:                           q.createStepStmt,
		createTagStmt:                            q.createTagStmt,
		createTaskStmt:                           q.createTaskStmt,
		deleteActionOldExecutionsStmt:            q.deleteActionOldExecutionsStmt,
		deleteAutomatedActionStmt:                q.deleteAutomatedActionStmt,
		deleteCreatorStmt:                        q.deleteCreatorStmt,
		deleteCreatorListStmt:                    q.deleteCreatorListStmt,
		deleteFactStmt:                           q.deleteFactStmt,
		deleteFunnelStmt:                         q.deleteFunnelStmt,
		deleteListStmt:                           q.deleteListStmt,
		deleteObjectStmt:                         q.deleteObjectStmt,
		deleteObjectTypeStmt:                     q.deleteObjectTypeStmt,
		deleteStepStmt:                           q.deleteStepStmt,
		deleteTagStmt:                            q.deleteTagStmt,
		deleteTaskStmt:                           q.deleteTaskStmt,
		findObjectByAliasOrIDStringStmt:          q.findObjectByAliasOrIDStringStmt,
		findTagByNormalizedNameStmt:              q.findTagByNormalizedNameStmt,
		getAutomatedActionStmt:                   q.getAutomatedActionStmt,
		getCreatorStmt:                           q.getCreatorStmt,
		getCreatorByIDStmt:                       q.getCreatorByIDStmt,
		getCreatorByUsernameStmt:                 q.getCreatorByUsernameStmt,
		getCreatorDailyActivityStmt:              q.getCreatorDailyActivityStmt,
		getCreatorListByIDStmt:                   q.getCreatorListByIDStmt,
		getFactByIDStmt:                          q.getFactByIDStmt,
		getFeedStmt:                              q.getFeedStmt,
		getFunnelStmt:                            q.getFunnelStmt,
		getImportTaskStmt:                        q.getImportTaskStmt,
		getImportTaskHistoryStmt:                 q.getImportTaskHistoryStmt,
		getLatestExecutionStmt:                   q.getLatestExecutionStmt,
		getListByIDStmt:                          q.getListByIDStmt,
		getObjStepStmt:                           q.getObjStepStmt,
		getObjectByIDStringStmt:                  q.getObjectByIDStringStmt,
		getObjectDetailsStmt:                     q.getObjectDetailsStmt,
		getObjectTypeByIDStmt:                    q.getObjectTypeByIDStmt,
		getObjectTypeValueStmt:                   q.getObjectTypeValueStmt,
		getObjectsForStepStmt:                    q.getObjectsForStepStmt,
		getOngoingImportTaskStmt:                 q.getOngoingImportTaskStmt,
		getOrgDetailsStmt:                        q.getOrgDetailsStmt,
		getPendingActionsStmt:                    q.getPendingActionsStmt,
		getStepStmt:                              q.getStepStmt,
		getTagByIDStmt:                           q.getTagByIDStmt,
		getTagsByIDsStmt:                         q.getTagsByIDsStmt,
		getTaskByIDStmt:                          q.getTaskByIDStmt,
		hardDeleteObjStepStmt:                    q.hardDeleteObjStepStmt,
		healthCheckStmt:                          q.healthCheckStmt,
		listActionExecutionsStmt:                 q.listActionExecutionsStmt,
		listAutomatedActionsStmt:                 q.listAutomatedActionsStmt,
		listCreatorListsByCreatorIDStmt:          q.listCreatorListsByCreatorIDStmt,
		listFactsByOrgIDStmt:                     q.listFactsByOrgIDStmt,
		listFunnelsStmt:                          q.listFunnelsStmt,
		listListsByOrgIDStmt:                     q.listListsByOrgIDStmt,
		listObjectTypesStmt:                      q.listObjectTypesStmt,
		listObjectsAdvancedStmt:                  q.listObjectsAdvancedStmt,
		listObjectsByOrgIDStmt:                   q.listObjectsByOrgIDStmt,
		listObjectsByTaskIDStmt:                  q.listObjectsByTaskIDStmt,
		listObjectsByTypeWithAdvancedFilterStmt:  q.listObjectsByTypeWithAdvancedFilterStmt,
		listObjectsWithNormalizedDataStmt:        q.listObjectsWithNormalizedDataStmt,
		listOrgMembersStmt:                       q.listOrgMembersStmt,
		listStepsByFunnelStmt:                    q.listStepsByFunnelStmt,
		listTagsStmt:                             q.listTagsStmt,
		listTasksByObjectIDStmt:                  q.listTasksByObjectIDStmt,
		listTasksByOrgIDStmt:                     q.listTasksByOrgIDStmt,
		listTasksWithFilterStmt:                  q.listTasksWithFilterStmt,
		markFeedAsSeenStmt:                       q.markFeedAsSeenStmt,
		mergeObjectsStmt:                         q.mergeObjectsStmt,
		removeObjectTypeValueStmt:                q.removeObjectTypeValueStmt,
		removeObjectsFromFactStmt:                q.removeObjectsFromFactStmt,
		removeObjectsFromTaskStmt:                q.removeObjectsFromTaskStmt,
		removeTagFromObjectStmt:                  q.removeTagFromObjectStmt,
		softDeleteObjStepStmt:                    q.softDeleteObjStepStmt,
		updateActionExecutionStmt:                q.updateActionExecutionStmt,
		updateActionLastRunStmt:                  q.updateActionLastRunStmt,
		updateAutomatedActionStmt:                q.updateAutomatedActionStmt,
		updateCreatorListStmt:                    q.updateCreatorListStmt,
		updateFactStmt:                           q.updateFactStmt,
		updateFunnelStmt:                         q.updateFunnelStmt,
		updateImportTaskErrorStmt:                q.updateImportTaskErrorStmt,
		updateImportTaskProgressStmt:             q.updateImportTaskProgressStmt,
		updateImportTaskStatusStmt:               q.updateImportTaskStatusStmt,
		updateListStmt:                           q.updateListStmt,
		updateObjStepStmt:                        q.updateObjStepStmt,
		updateObjStepSubStatusStmt:               q.updateObjStepSubStatusStmt,
		updateObjectStmt:                         q.updateObjectStmt,
		updateObjectTypeStmt:                     q.updateObjectTypeStmt,
		updateObjectTypeValueStmt:                q.updateObjectTypeValueStmt,
		updateOrgDetailsStmt:                     q.updateOrgDetailsStmt,
		updateStepStmt:                           q.updateStepStmt,
		updateTagStmt:                            q.updateTagStmt,
		updateTaskStmt:                           q.updateTaskStmt,
		updateUserPasswordStmt:                   q.updateUserPasswordStmt,
		updateUserProfileStmt:                    q.updateUserProfileStmt,
		updateUserRoleAndStatusStmt:              q.updateUserRoleAndStatusStmt,
		upsertObjectTypeValueStmt:                q.upsertObjectTypeValueStmt,
		validateMergeObjectsStmt:                 q.validateMergeObjectsStmt,
	}
}
