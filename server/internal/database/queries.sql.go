// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: queries.sql

package database

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createCreator = `-- name: CreateCreator :one
INSERT INTO creator (username, pwd, profile, role, org_id)
VALUES ($1, $2, $3, $4, $5)
RETURNING id, username, pwd, profile, role, org_id, active, created_at, deleted_at
`

type CreateCreatorParams struct {
	Username string      `json:"username"`
	Pwd      string      `json:"pwd"`
	Profile  []byte      `json:"profile"`
	Role     string      `json:"role"`
	OrgID    pgtype.UUID `json:"orgId"`
}

func (q *Queries) CreateCreator(ctx context.Context, arg CreateCreatorParams) (Creator, error) {
	row := q.db.QueryRow(ctx, createCreator,
		arg.Username,
		arg.Pwd,
		arg.Profile,
		arg.Role,
		arg.OrgID,
	)
	var i Creator
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Pwd,
		&i.Profile,
		&i.Role,
		&i.OrgID,
		&i.Active,
		&i.CreatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const createFunnel = `-- name: CreateFunnel :one
INSERT INTO funnel (name, description, creator_id)
VALUES ($1, $2, $3)
RETURNING id, name, description, creator_id, created_at, deleted_at
`

type CreateFunnelParams struct {
	Name        string      `json:"name"`
	Description pgtype.Text `json:"description"`
	CreatorID   pgtype.UUID `json:"creatorId"`
}

func (q *Queries) CreateFunnel(ctx context.Context, arg CreateFunnelParams) (Funnel, error) {
	row := q.db.QueryRow(ctx, createFunnel, arg.Name, arg.Description, arg.CreatorID)
	var i Funnel
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.CreatorID,
		&i.CreatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const createObject = `-- name: CreateObject :one
INSERT INTO obj (name, description, id_string, creator_id)
VALUES ($1, $2, $3, $4)
RETURNING id, name, description, id_string, creator_id, created_at, deleted_at
`

type CreateObjectParams struct {
	Name        pgtype.Text `json:"name"`
	Description pgtype.Text `json:"description"`
	IDString    string      `json:"idString"`
	CreatorID   pgtype.UUID `json:"creatorId"`
}

func (q *Queries) CreateObject(ctx context.Context, arg CreateObjectParams) (Obj, error) {
	row := q.db.QueryRow(ctx, createObject,
		arg.Name,
		arg.Description,
		arg.IDString,
		arg.CreatorID,
	)
	var i Obj
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.IDString,
		&i.CreatorID,
		&i.CreatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const deleteCreator = `-- name: DeleteCreator :exec
UPDATE creator SET deleted_at = CURRENT_TIMESTAMP WHERE id = $1 AND deleted_at IS NULL
`

func (q *Queries) DeleteCreator(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deleteCreator, id)
	return err
}

const deleteFunnel = `-- name: DeleteFunnel :exec
UPDATE funnel SET deleted_at = CURRENT_TIMESTAMP WHERE id = $1 AND deleted_at IS NULL
`

func (q *Queries) DeleteFunnel(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deleteFunnel, id)
	return err
}

const deleteObject = `-- name: DeleteObject :exec
UPDATE obj SET deleted_at = CURRENT_TIMESTAMP WHERE id = $1 AND deleted_at IS NULL
`

func (q *Queries) DeleteObject(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deleteObject, id)
	return err
}

const getCreator = `-- name: GetCreator :one
SELECT id, username, pwd, profile, role, org_id, active, created_at, deleted_at FROM creator WHERE id = $1 AND deleted_at IS NULL
`

func (q *Queries) GetCreator(ctx context.Context, id pgtype.UUID) (Creator, error) {
	row := q.db.QueryRow(ctx, getCreator, id)
	var i Creator
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Pwd,
		&i.Profile,
		&i.Role,
		&i.OrgID,
		&i.Active,
		&i.CreatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getFunnel = `-- name: GetFunnel :one
SELECT id, name, description, creator_id, created_at, deleted_at FROM funnel WHERE id = $1 AND deleted_at IS NULL
`

func (q *Queries) GetFunnel(ctx context.Context, id pgtype.UUID) (Funnel, error) {
	row := q.db.QueryRow(ctx, getFunnel, id)
	var i Funnel
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.CreatorID,
		&i.CreatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getObject = `-- name: GetObject :one
SELECT id, name, description, id_string, creator_id, created_at, deleted_at FROM obj WHERE id = $1 AND deleted_at IS NULL
`

func (q *Queries) GetObject(ctx context.Context, id pgtype.UUID) (Obj, error) {
	row := q.db.QueryRow(ctx, getObject, id)
	var i Obj
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.IDString,
		&i.CreatorID,
		&i.CreatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const listCreators = `-- name: ListCreators :many
SELECT id, username, pwd, profile, role, org_id, active, created_at, deleted_at FROM creator WHERE org_id = $1 AND deleted_at IS NULL ORDER BY created_at DESC LIMIT $2 OFFSET $3
`

type ListCreatorsParams struct {
	OrgID  pgtype.UUID `json:"orgId"`
	Limit  int32       `json:"limit"`
	Offset int32       `json:"offset"`
}

func (q *Queries) ListCreators(ctx context.Context, arg ListCreatorsParams) ([]Creator, error) {
	rows, err := q.db.Query(ctx, listCreators, arg.OrgID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Creator{}
	for rows.Next() {
		var i Creator
		if err := rows.Scan(
			&i.ID,
			&i.Username,
			&i.Pwd,
			&i.Profile,
			&i.Role,
			&i.OrgID,
			&i.Active,
			&i.CreatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listFunnels = `-- name: ListFunnels :many
SELECT id, name, description, creator_id, created_at, deleted_at FROM funnel WHERE deleted_at IS NULL ORDER BY created_at DESC LIMIT $1 OFFSET $2
`

type ListFunnelsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListFunnels(ctx context.Context, arg ListFunnelsParams) ([]Funnel, error) {
	rows, err := q.db.Query(ctx, listFunnels, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Funnel{}
	for rows.Next() {
		var i Funnel
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.CreatorID,
			&i.CreatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listObjects = `-- name: ListObjects :many
SELECT id, name, description, id_string, creator_id, created_at, deleted_at FROM obj WHERE deleted_at IS NULL ORDER BY created_at DESC LIMIT $1 OFFSET $2
`

type ListObjectsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListObjects(ctx context.Context, arg ListObjectsParams) ([]Obj, error) {
	rows, err := q.db.Query(ctx, listObjects, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Obj{}
	for rows.Next() {
		var i Obj
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.IDString,
			&i.CreatorID,
			&i.CreatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateCreator = `-- name: UpdateCreator :one
UPDATE creator
SET username = $2, profile = $3, role = $4
WHERE id = $1 AND deleted_at IS NULL
RETURNING id, username, pwd, profile, role, org_id, active, created_at, deleted_at
`

type UpdateCreatorParams struct {
	ID       pgtype.UUID `json:"id"`
	Username string      `json:"username"`
	Profile  []byte      `json:"profile"`
	Role     string      `json:"role"`
}

func (q *Queries) UpdateCreator(ctx context.Context, arg UpdateCreatorParams) (Creator, error) {
	row := q.db.QueryRow(ctx, updateCreator,
		arg.ID,
		arg.Username,
		arg.Profile,
		arg.Role,
	)
	var i Creator
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Pwd,
		&i.Profile,
		&i.Role,
		&i.OrgID,
		&i.Active,
		&i.CreatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const updateFunnel = `-- name: UpdateFunnel :one
UPDATE funnel
SET name = $2, description = $3
WHERE id = $1 AND deleted_at IS NULL
RETURNING id, name, description, creator_id, created_at, deleted_at
`

type UpdateFunnelParams struct {
	ID          pgtype.UUID `json:"id"`
	Name        string      `json:"name"`
	Description pgtype.Text `json:"description"`
}

func (q *Queries) UpdateFunnel(ctx context.Context, arg UpdateFunnelParams) (Funnel, error) {
	row := q.db.QueryRow(ctx, updateFunnel, arg.ID, arg.Name, arg.Description)
	var i Funnel
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.CreatorID,
		&i.CreatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const updateObject = `-- name: UpdateObject :one
UPDATE obj
SET name = $2, description = $3, id_string = $4
WHERE id = $1 AND deleted_at IS NULL
RETURNING id, name, description, id_string, creator_id, created_at, deleted_at
`

type UpdateObjectParams struct {
	ID          pgtype.UUID `json:"id"`
	Name        pgtype.Text `json:"name"`
	Description pgtype.Text `json:"description"`
	IDString    string      `json:"idString"`
}

func (q *Queries) UpdateObject(ctx context.Context, arg UpdateObjectParams) (Obj, error) {
	row := q.db.QueryRow(ctx, updateObject,
		arg.ID,
		arg.Name,
		arg.Description,
		arg.IDString,
	)
	var i Obj
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.IDString,
		&i.CreatorID,
		&i.CreatedAt,
		&i.DeletedAt,
	)
	return i, err
}
