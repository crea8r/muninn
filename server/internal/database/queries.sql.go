// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: queries.sql

package database

import (
	"context"
	"encoding/json"
	"time"

	"github.com/google/uuid"
	"github.com/lib/pq"
)

const countObjectTypes = `-- name: CountObjectTypes :one
SELECT COUNT(*) 
FROM obj_type o
JOIN creator c ON o.creator_id = c.id
WHERE c.org_id = $1
  AND o.deleted_at IS NULL
  AND ($2::text = '' OR 
       o.name ILIKE '%' || $2 || '%' OR 
       o.description ILIKE '%' || $2 || '%' OR
       o.fields_search @@ to_tsquery('english', $2))
`

type CountObjectTypesParams struct {
	OrgID   uuid.UUID `json:"org_id"`
	Column2 string    `json:"column_2"`
}

func (q *Queries) CountObjectTypes(ctx context.Context, arg CountObjectTypesParams) (int64, error) {
	row := q.queryRow(ctx, q.countObjectTypesStmt, countObjectTypes, arg.OrgID, arg.Column2)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const countTags = `-- name: CountTags :one
SELECT COUNT(*) 
FROM tag
WHERE org_id = $1
  AND deleted_at IS NULL
  AND ($2::text = '' OR (name ILIKE '%' || $2 || '%' OR description ILIKE '%' || $2 || '%'))
`

type CountTagsParams struct {
	OrgID   uuid.UUID `json:"org_id"`
	Column2 string    `json:"column_2"`
}

func (q *Queries) CountTags(ctx context.Context, arg CountTagsParams) (int64, error) {
	row := q.queryRow(ctx, q.countTagsStmt, countTags, arg.OrgID, arg.Column2)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createCreator = `-- name: CreateCreator :one
INSERT INTO creator (username, pwd, profile, role, org_id, active, created_at)
VALUES ($1, $2, $3, $4, $5, $6, CURRENT_TIMESTAMP)
RETURNING id, username, pwd, profile, role, org_id, active, created_at, deleted_at
`

type CreateCreatorParams struct {
	Username string          `json:"username"`
	Pwd      string          `json:"pwd"`
	Profile  json.RawMessage `json:"profile"`
	Role     string          `json:"role"`
	OrgID    uuid.UUID       `json:"org_id"`
	Active   bool            `json:"active"`
}

func (q *Queries) CreateCreator(ctx context.Context, arg CreateCreatorParams) (Creator, error) {
	row := q.queryRow(ctx, q.createCreatorStmt, createCreator,
		arg.Username,
		arg.Pwd,
		arg.Profile,
		arg.Role,
		arg.OrgID,
		arg.Active,
	)
	var i Creator
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Pwd,
		&i.Profile,
		&i.Role,
		&i.OrgID,
		&i.Active,
		&i.CreatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const createFeed = `-- name: CreateFeed :one
INSERT INTO feed (creator_id, content, seen)
VALUES ($1, $2, $3)
RETURNING id, creator_id, content, seen, created_at, deleted_at
`

type CreateFeedParams struct {
	CreatorID uuid.UUID       `json:"creator_id"`
	Content   json.RawMessage `json:"content"`
	Seen      bool            `json:"seen"`
}

func (q *Queries) CreateFeed(ctx context.Context, arg CreateFeedParams) (Feed, error) {
	row := q.queryRow(ctx, q.createFeedStmt, createFeed, arg.CreatorID, arg.Content, arg.Seen)
	var i Feed
	err := row.Scan(
		&i.ID,
		&i.CreatorID,
		&i.Content,
		&i.Seen,
		&i.CreatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const createFunnel = `-- name: CreateFunnel :one
INSERT INTO funnel (name, description, creator_id)
VALUES ($1, $2, $3)
RETURNING id, name, description, creator_id, created_at, deleted_at
`

type CreateFunnelParams struct {
	Name        string        `json:"name"`
	Description string        `json:"description"`
	CreatorID   uuid.NullUUID `json:"creator_id"`
}

func (q *Queries) CreateFunnel(ctx context.Context, arg CreateFunnelParams) (Funnel, error) {
	row := q.queryRow(ctx, q.createFunnelStmt, createFunnel, arg.Name, arg.Description, arg.CreatorID)
	var i Funnel
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.CreatorID,
		&i.CreatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const createObject = `-- name: CreateObject :one
INSERT INTO obj (name, description, id_string, creator_id)
VALUES ($1, $2, $3, $4)
RETURNING id, name, description, id_string, creator_id, created_at, deleted_at
`

type CreateObjectParams struct {
	Name        string        `json:"name"`
	Description string        `json:"description"`
	IDString    string        `json:"id_string"`
	CreatorID   uuid.NullUUID `json:"creator_id"`
}

func (q *Queries) CreateObject(ctx context.Context, arg CreateObjectParams) (Obj, error) {
	row := q.queryRow(ctx, q.createObjectStmt, createObject,
		arg.Name,
		arg.Description,
		arg.IDString,
		arg.CreatorID,
	)
	var i Obj
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.IDString,
		&i.CreatorID,
		&i.CreatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const createOrganization = `-- name: CreateOrganization :one
INSERT INTO org (name, profile, created_at)
VALUES ($1, $2, CURRENT_TIMESTAMP)
RETURNING id, name, profile, created_at, deleted_at
`

type CreateOrganizationParams struct {
	Name    string          `json:"name"`
	Profile json.RawMessage `json:"profile"`
}

func (q *Queries) CreateOrganization(ctx context.Context, arg CreateOrganizationParams) (Org, error) {
	row := q.queryRow(ctx, q.createOrganizationStmt, createOrganization, arg.Name, arg.Profile)
	var i Org
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Profile,
		&i.CreatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const createTag = `-- name: CreateTag :one

INSERT INTO tag (name, description, color_schema, org_id)
VALUES ($1, $2, $3, $4)
RETURNING id, name, description, color_schema, org_id, created_at, deleted_at
`

type CreateTagParams struct {
	Name        string          `json:"name"`
	Description string          `json:"description"`
	ColorSchema json.RawMessage `json:"color_schema"`
	OrgID       uuid.UUID       `json:"org_id"`
}

// Setting/Tag section
func (q *Queries) CreateTag(ctx context.Context, arg CreateTagParams) (Tag, error) {
	row := q.queryRow(ctx, q.createTagStmt, createTag,
		arg.Name,
		arg.Description,
		arg.ColorSchema,
		arg.OrgID,
	)
	var i Tag
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.ColorSchema,
		&i.OrgID,
		&i.CreatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const deleteCreator = `-- name: DeleteCreator :exec
UPDATE creator SET deleted_at = NOW() WHERE id = $1
`

func (q *Queries) DeleteCreator(ctx context.Context, id uuid.UUID) error {
	_, err := q.exec(ctx, q.deleteCreatorStmt, deleteCreator, id)
	return err
}

const deleteFunnel = `-- name: DeleteFunnel :exec
UPDATE funnel SET deleted_at = NOW() WHERE id = $1
`

func (q *Queries) DeleteFunnel(ctx context.Context, id uuid.UUID) error {
	_, err := q.exec(ctx, q.deleteFunnelStmt, deleteFunnel, id)
	return err
}

const deleteObject = `-- name: DeleteObject :exec
UPDATE obj SET deleted_at = NOW() WHERE id = $1
`

func (q *Queries) DeleteObject(ctx context.Context, id uuid.UUID) error {
	_, err := q.exec(ctx, q.deleteObjectStmt, deleteObject, id)
	return err
}

const deleteObjectType = `-- name: DeleteObjectType :execrows
UPDATE obj_type
SET deleted_at = CURRENT_TIMESTAMP
WHERE obj_type.id = $1 AND deleted_at IS NULL
  AND NOT EXISTS (
    SELECT 1 FROM obj_type_value WHERE type_id = $1
  )
`

func (q *Queries) DeleteObjectType(ctx context.Context, id uuid.UUID) (int64, error) {
	result, err := q.exec(ctx, q.deleteObjectTypeStmt, deleteObjectType, id)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}

const deleteTag = `-- name: DeleteTag :execrows
DELETE FROM tag 
WHERE id = $1 AND deleted_at IS NULL
  AND NOT EXISTS (
    SELECT 1 FROM obj_tag WHERE tag_id = $1
  )
`

func (q *Queries) DeleteTag(ctx context.Context, id uuid.UUID) (int64, error) {
	result, err := q.exec(ctx, q.deleteTagStmt, deleteTag, id)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}

const getCreator = `-- name: GetCreator :one
SELECT id, username, pwd, profile, role, org_id, active, created_at, deleted_at FROM creator WHERE id = $1 LIMIT 1
`

func (q *Queries) GetCreator(ctx context.Context, id uuid.UUID) (Creator, error) {
	row := q.queryRow(ctx, q.getCreatorStmt, getCreator, id)
	var i Creator
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Pwd,
		&i.Profile,
		&i.Role,
		&i.OrgID,
		&i.Active,
		&i.CreatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getCreatorByID = `-- name: GetCreatorByID :one
SELECT id, username, pwd, profile, role, org_id, active, created_at, deleted_at FROM creator WHERE id = $1 LIMIT 1
`

func (q *Queries) GetCreatorByID(ctx context.Context, id uuid.UUID) (Creator, error) {
	row := q.queryRow(ctx, q.getCreatorByIDStmt, getCreatorByID, id)
	var i Creator
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Pwd,
		&i.Profile,
		&i.Role,
		&i.OrgID,
		&i.Active,
		&i.CreatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getCreatorByUsername = `-- name: GetCreatorByUsername :one
SELECT id, username, pwd, profile, role, org_id, active, created_at, deleted_at FROM creator
WHERE username = $1 AND active = $2
`

type GetCreatorByUsernameParams struct {
	Username string `json:"username"`
	Active   bool   `json:"active"`
}

func (q *Queries) GetCreatorByUsername(ctx context.Context, arg GetCreatorByUsernameParams) (Creator, error) {
	row := q.queryRow(ctx, q.getCreatorByUsernameStmt, getCreatorByUsername, arg.Username, arg.Active)
	var i Creator
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Pwd,
		&i.Profile,
		&i.Role,
		&i.OrgID,
		&i.Active,
		&i.CreatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getFeed = `-- name: GetFeed :many
SELECT id, creator_id, content, seen, created_at, deleted_at FROM feed
WHERE creator_id = $1 AND seen = false
ORDER BY created_at DESC
`

func (q *Queries) GetFeed(ctx context.Context, creatorID uuid.UUID) ([]Feed, error) {
	rows, err := q.query(ctx, q.getFeedStmt, getFeed, creatorID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Feed
	for rows.Next() {
		var i Feed
		if err := rows.Scan(
			&i.ID,
			&i.CreatorID,
			&i.Content,
			&i.Seen,
			&i.CreatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getFunnel = `-- name: GetFunnel :one
SELECT id, name, description, creator_id, created_at, deleted_at FROM funnel WHERE id = $1 LIMIT 1
`

func (q *Queries) GetFunnel(ctx context.Context, id uuid.UUID) (Funnel, error) {
	row := q.queryRow(ctx, q.getFunnelStmt, getFunnel, id)
	var i Funnel
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.CreatorID,
		&i.CreatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getObject = `-- name: GetObject :one
SELECT id, name, description, id_string, creator_id, created_at, deleted_at FROM obj WHERE id = $1 LIMIT 1
`

func (q *Queries) GetObject(ctx context.Context, id uuid.UUID) (Obj, error) {
	row := q.queryRow(ctx, q.getObjectStmt, getObject, id)
	var i Obj
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.IDString,
		&i.CreatorID,
		&i.CreatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getObjectTypeByID = `-- name: GetObjectTypeByID :one
SELECT id, name, description, fields, creator_id, created_at, deleted_at, fields_search FROM obj_type
WHERE id = $1 AND deleted_at IS NULL
LIMIT 1
`

func (q *Queries) GetObjectTypeByID(ctx context.Context, id uuid.UUID) (ObjType, error) {
	row := q.queryRow(ctx, q.getObjectTypeByIDStmt, getObjectTypeByID, id)
	var i ObjType
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Fields,
		&i.CreatorID,
		&i.CreatedAt,
		&i.DeletedAt,
		&i.FieldsSearch,
	)
	return i, err
}

const getSessionByToken = `-- name: GetSessionByToken :one
SELECT id, creator_id, jwt, expired_at, created_at FROM creator_session WHERE jwt = $1 LIMIT 1
`

func (q *Queries) GetSessionByToken(ctx context.Context, jwt string) (CreatorSession, error) {
	row := q.queryRow(ctx, q.getSessionByTokenStmt, getSessionByToken, jwt)
	var i CreatorSession
	err := row.Scan(
		&i.ID,
		&i.CreatorID,
		&i.Jwt,
		&i.ExpiredAt,
		&i.CreatedAt,
	)
	return i, err
}

const getTagByID = `-- name: GetTagByID :one
SELECT id, name, description, color_schema, org_id, created_at, deleted_at FROM tag
WHERE id = $1 AND deleted_at IS NULL
LIMIT 1
`

func (q *Queries) GetTagByID(ctx context.Context, id uuid.UUID) (Tag, error) {
	row := q.queryRow(ctx, q.getTagByIDStmt, getTagByID, id)
	var i Tag
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.ColorSchema,
		&i.OrgID,
		&i.CreatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const listCreators = `-- name: ListCreators :many
SELECT id, username, pwd, profile, role, org_id, active, created_at, deleted_at FROM creator
WHERE org_id = $1
ORDER BY created_at DESC
LIMIT $2 OFFSET $3
`

type ListCreatorsParams struct {
	OrgID  uuid.UUID `json:"org_id"`
	Limit  int32     `json:"limit"`
	Offset int32     `json:"offset"`
}

func (q *Queries) ListCreators(ctx context.Context, arg ListCreatorsParams) ([]Creator, error) {
	rows, err := q.query(ctx, q.listCreatorsStmt, listCreators, arg.OrgID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Creator
	for rows.Next() {
		var i Creator
		if err := rows.Scan(
			&i.ID,
			&i.Username,
			&i.Pwd,
			&i.Profile,
			&i.Role,
			&i.OrgID,
			&i.Active,
			&i.CreatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listFunnels = `-- name: ListFunnels :many
SELECT id, name, description, creator_id, created_at, deleted_at FROM funnel
WHERE creator_id = $1
ORDER BY created_at DESC
LIMIT $2 OFFSET $3
`

type ListFunnelsParams struct {
	CreatorID uuid.NullUUID `json:"creator_id"`
	Limit     int32         `json:"limit"`
	Offset    int32         `json:"offset"`
}

func (q *Queries) ListFunnels(ctx context.Context, arg ListFunnelsParams) ([]Funnel, error) {
	rows, err := q.query(ctx, q.listFunnelsStmt, listFunnels, arg.CreatorID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Funnel
	for rows.Next() {
		var i Funnel
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.CreatorID,
			&i.CreatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listObjectTypes = `-- name: ListObjectTypes :many
SELECT o.id, o.name, o.description, o.fields, o.created_at
FROM obj_type o
JOIN creator c ON o.creator_id = c.id
WHERE c.org_id = $1
  AND o.deleted_at IS NULL
  AND ($2::text = '' OR 
       o.name ILIKE '%' || $2 || '%' OR 
       o.description ILIKE '%' || $2 || '%' OR
       o.fields_search @@ to_tsquery('english', $2))
ORDER BY o.created_at DESC
LIMIT $3 OFFSET $4
`

type ListObjectTypesParams struct {
	OrgID   uuid.UUID `json:"org_id"`
	Column2 string    `json:"column_2"`
	Limit   int32     `json:"limit"`
	Offset  int32     `json:"offset"`
}

type ListObjectTypesRow struct {
	ID          uuid.UUID       `json:"id"`
	Name        string          `json:"name"`
	Description string          `json:"description"`
	Fields      json.RawMessage `json:"fields"`
	CreatedAt   time.Time       `json:"created_at"`
}

func (q *Queries) ListObjectTypes(ctx context.Context, arg ListObjectTypesParams) ([]ListObjectTypesRow, error) {
	rows, err := q.query(ctx, q.listObjectTypesStmt, listObjectTypes,
		arg.OrgID,
		arg.Column2,
		arg.Limit,
		arg.Offset,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListObjectTypesRow
	for rows.Next() {
		var i ListObjectTypesRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.Fields,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listObjects = `-- name: ListObjects :many
SELECT id, name, description, id_string, creator_id, created_at, deleted_at FROM obj
WHERE creator_id = $1
ORDER BY created_at DESC
LIMIT $2 OFFSET $3
`

type ListObjectsParams struct {
	CreatorID uuid.NullUUID `json:"creator_id"`
	Limit     int32         `json:"limit"`
	Offset    int32         `json:"offset"`
}

func (q *Queries) ListObjects(ctx context.Context, arg ListObjectsParams) ([]Obj, error) {
	rows, err := q.query(ctx, q.listObjectsStmt, listObjects, arg.CreatorID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Obj
	for rows.Next() {
		var i Obj
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.IDString,
			&i.CreatorID,
			&i.CreatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listTags = `-- name: ListTags :many
SELECT t.id, t.name, t.description, t.color_schema, t.created_at
FROM tag t
WHERE t.org_id = $1
  AND t.deleted_at IS NULL
  AND ($2::text = '' OR (t.name ILIKE '%' || $2 || '%' OR t.description ILIKE '%' || $2 || '%'))
ORDER BY t.created_at DESC
LIMIT $3 OFFSET $4
`

type ListTagsParams struct {
	OrgID   uuid.UUID `json:"org_id"`
	Column2 string    `json:"column_2"`
	Limit   int32     `json:"limit"`
	Offset  int32     `json:"offset"`
}

type ListTagsRow struct {
	ID          uuid.UUID       `json:"id"`
	Name        string          `json:"name"`
	Description string          `json:"description"`
	ColorSchema json.RawMessage `json:"color_schema"`
	CreatedAt   time.Time       `json:"created_at"`
}

func (q *Queries) ListTags(ctx context.Context, arg ListTagsParams) ([]ListTagsRow, error) {
	rows, err := q.query(ctx, q.listTagsStmt, listTags,
		arg.OrgID,
		arg.Column2,
		arg.Limit,
		arg.Offset,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListTagsRow
	for rows.Next() {
		var i ListTagsRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.ColorSchema,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const markFeedAsSeen = `-- name: MarkFeedAsSeen :exec
UPDATE feed
SET seen = true
WHERE id = ANY($1::uuid[])
`

func (q *Queries) MarkFeedAsSeen(ctx context.Context, dollar_1 []uuid.UUID) error {
	_, err := q.exec(ctx, q.markFeedAsSeenStmt, markFeedAsSeen, pq.Array(dollar_1))
	return err
}

const updateCreator = `-- name: UpdateCreator :one
UPDATE creator
SET username = $2, profile = $3, role = $4
WHERE id = $1
RETURNING id, username, pwd, profile, role, org_id, active, created_at, deleted_at
`

type UpdateCreatorParams struct {
	ID       uuid.UUID       `json:"id"`
	Username string          `json:"username"`
	Profile  json.RawMessage `json:"profile"`
	Role     string          `json:"role"`
}

func (q *Queries) UpdateCreator(ctx context.Context, arg UpdateCreatorParams) (Creator, error) {
	row := q.queryRow(ctx, q.updateCreatorStmt, updateCreator,
		arg.ID,
		arg.Username,
		arg.Profile,
		arg.Role,
	)
	var i Creator
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Pwd,
		&i.Profile,
		&i.Role,
		&i.OrgID,
		&i.Active,
		&i.CreatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const updateFunnel = `-- name: UpdateFunnel :one
UPDATE funnel
SET name = $2, description = $3
WHERE id = $1
RETURNING id, name, description, creator_id, created_at, deleted_at
`

type UpdateFunnelParams struct {
	ID          uuid.UUID `json:"id"`
	Name        string    `json:"name"`
	Description string    `json:"description"`
}

func (q *Queries) UpdateFunnel(ctx context.Context, arg UpdateFunnelParams) (Funnel, error) {
	row := q.queryRow(ctx, q.updateFunnelStmt, updateFunnel, arg.ID, arg.Name, arg.Description)
	var i Funnel
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.CreatorID,
		&i.CreatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const updateObject = `-- name: UpdateObject :one
UPDATE obj
SET name = $2, description = $3, id_string = $4
WHERE id = $1
RETURNING id, name, description, id_string, creator_id, created_at, deleted_at
`

type UpdateObjectParams struct {
	ID          uuid.UUID `json:"id"`
	Name        string    `json:"name"`
	Description string    `json:"description"`
	IDString    string    `json:"id_string"`
}

func (q *Queries) UpdateObject(ctx context.Context, arg UpdateObjectParams) (Obj, error) {
	row := q.queryRow(ctx, q.updateObjectStmt, updateObject,
		arg.ID,
		arg.Name,
		arg.Description,
		arg.IDString,
	)
	var i Obj
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.IDString,
		&i.CreatorID,
		&i.CreatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const updateObjectType = `-- name: UpdateObjectType :one
UPDATE obj_type
SET name = $2, description = $3, fields = $4
WHERE id = $1 AND deleted_at IS NULL
RETURNING id, name, description, fields, creator_id, created_at, deleted_at, fields_search
`

type UpdateObjectTypeParams struct {
	ID          uuid.UUID       `json:"id"`
	Name        string          `json:"name"`
	Description string          `json:"description"`
	Fields      json.RawMessage `json:"fields"`
}

func (q *Queries) UpdateObjectType(ctx context.Context, arg UpdateObjectTypeParams) (ObjType, error) {
	row := q.queryRow(ctx, q.updateObjectTypeStmt, updateObjectType,
		arg.ID,
		arg.Name,
		arg.Description,
		arg.Fields,
	)
	var i ObjType
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Fields,
		&i.CreatorID,
		&i.CreatedAt,
		&i.DeletedAt,
		&i.FieldsSearch,
	)
	return i, err
}

const updateTag = `-- name: UpdateTag :one
UPDATE tag
SET description = $2, color_schema = $3
WHERE id = $1 AND deleted_at IS NULL
RETURNING id, name, description, color_schema, org_id, created_at, deleted_at
`

type UpdateTagParams struct {
	ID          uuid.UUID       `json:"id"`
	Description string          `json:"description"`
	ColorSchema json.RawMessage `json:"color_schema"`
}

func (q *Queries) UpdateTag(ctx context.Context, arg UpdateTagParams) (Tag, error) {
	row := q.queryRow(ctx, q.updateTagStmt, updateTag, arg.ID, arg.Description, arg.ColorSchema)
	var i Tag
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.ColorSchema,
		&i.OrgID,
		&i.CreatedAt,
		&i.DeletedAt,
	)
	return i, err
}
