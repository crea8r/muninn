// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: external.sql

package database

import (
	"context"

	"github.com/google/uuid"
	"github.com/lib/pq"
)

const findObjectByAliasOrIDString = `-- name: FindObjectByAliasOrIDString :one
SELECT obj.id, obj.name, obj.photo, obj.description, obj.id_string, obj.creator_id, obj.created_at, obj.deleted_at, obj.aliases FROM obj
JOIN creator c ON o.creator_id = c.id
WHERE c.org_id = $2 AND 
id_string = $1 OR $1 = ANY(aliases)
AND deleted_at IS NULL
ORDER BY (id_string = $1) DESC
LIMIT 1
`

type FindObjectByAliasOrIDStringParams struct {
	IDString string    `json:"id_string"`
	OrgID    uuid.UUID `json:"org_id"`
}

func (q *Queries) FindObjectByAliasOrIDString(ctx context.Context, arg FindObjectByAliasOrIDStringParams) (Obj, error) {
	row := q.queryRow(ctx, q.findObjectByAliasOrIDStringStmt, findObjectByAliasOrIDString, arg.IDString, arg.OrgID)
	var i Obj
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Photo,
		&i.Description,
		&i.IDString,
		&i.CreatorID,
		&i.CreatedAt,
		&i.DeletedAt,
		pq.Array(&i.Aliases),
	)
	return i, err
}
